--------------------------------- What is Routing and how to enable ------------------
A  route is just an object, which contains path and the component class name, 
Now there can be multiple routes,  so pass a list(array) of object to provideRouter()
function, which is passed to providers array in bootstrap application.

--------------------------------- Router Outlet --------------------------------------
We define router-outlet wherever we want to use the componenent in the window in that particular.
To be precise, We can define it so that the navigation bar.header footer etc are shown as 
per oue needs   

--------------------------------- routerLink Directive--------------------------------------
Though we can use anchor tags to redirect to /tasks route, but because of that, the whole application
loads from scratch and the files are also loaded, which results in the applicationbeing slower
and bad user experience, so we use routerLink Directive here.This Directive blocks the browser default 
behaviour to re-fetch the javascript documents

--------------------------------- Dynamic Routes --------------------------------------
We can have dynamic routes where atleast some part of the route is dynamic. It is denoted by
:dynamicPath

setting dynamic route in routerLink directive:-
i) routerLink takes array as input and concatinates all the array elements and 
also inserts a slash (/) at the end of each element. 
    [routerLink]="['/users', user().id]" 
ii) We can pass it like this -
    [routerLink] = "'/routes/ + user().id'"

--------------------------------- Input Binding / withComponentInputBinding() : UserTasksComponent ------------
We can extract the dynamic path from the route by setting a input property with the same
name as in the route (userId in this case) and pass withComponentInputBinding() as the 
second paramter to the provideRouter function, which itself is passed in the providers 
array.

--------------------------------- ActivatedRoute Service & Param Map (Alternative to withComponentInputBinding): UserTasksComponent --------------------------------- 
Param Map is a  observable field in the activated Route service, which changes on any change in the 
route and we can subscribe to this field to get knotified about the changes.

paramMap contains a key-value pair where key is the actual string we set up in route 
and its value is the string from url, basically if key is :uid then value is what we see 
in the url : u3, u4 etc

--------------------------------- Nested Routes : app.routes.ts/UserTasksComponent ------------
In case of nested routes, we should tell angular, where to render this route. Even though we 
have a router-outlet in our app but that is for our main app, for the child route, we need a separate
router-outlet, in the parent component.

--------------------------------- Relative Route Links : UserTasksComponent ---------------------------------
Though for the Add Task button in the UserTasksComponent, we can set the routerLink
to be /users/{id}/tasks/new by fetching the id somehow, but angular allows us to add 
relative links to the link currently active (basically the route of the parent component)

--------------------------------- Input Binding & paramMap : Part 2 : TasksComponent, AppConfig --------------------------------- 
Just like we can get userId (or lets say the dynamic path values)
in the UserTasksComponent, we can get it in the child component as well. 
i) For paramMap approach, it will work same and there are no changes/add-ons required.
ii) For Input Binding approach, there are certain add-ons required, we basically need to tell
angular about our intentions are let it know that we want the dynamic route data values inside
our child componenent too. We do so by adding 
                paramsInheritanceStrategy: 'always'  
in the withRouterConfig configuration in the provideRotuer function in the main configuration.

--------------------------------- Programitcally Router Navigate --------------------------------- 
We can navigate to different url, not just by routerLink but also programatically in our
.ts file -
    this.router.navigate(['/users', this.userId(), 'tasks'], {
      replaceUrl: true
    });
where replaceUrl is just a configuration, which restricts the user to go to the same page on
back button click supprted by the browser

---------------------------------- Redirecting in Routing -----------------------------------
{
    path: '',
    redirectTo: 'tasks',
    pathMatch: 'prefix'
}

We can redirect the user from one route to other route by defining the above route.
here pathMatch can be set to full or prefix, which means that the path (if it is a 
child route, then parent route path + child route path) 's prefix matched to the current
url or the path matches with the url to the full.

--------------------------------- ActivatedRoute versus ActivatedRoute SnapShot ----------------------
We use ActivatedRoute to use different observables to subscribe to them. But just in case we do not need
observables (maybe our component is not getting used again and again and we just need route value(:userId) only once).
Then instead of using ActivatedRoute, we can use ActivatedRoute SnapShot, which is -
            this.activatedRoute.snapshot.paramMap.get('userId);
Just an Alternative to basic activated Routes

-------------------------------- Adding Query Params : TasksComponent---------------------------------------
[queryParams]="{order: order === 'asc' ? 'desc' : 'asc'}">
We can add query params like this

-------------------------------- Extracting Query Params : TasksComponent---------------------------------------
The are two ways: -
i) If we got withComponentInputBinding enabled in the application, then just like we extract 
the value of dynamic route
ii) queryParams Observable Approach


-------------------------------- Adding Static Data to Routes : UserTasksComponent---------------------------------------
We can pass static data to routes in the app.routes.ts like this :
        data: {
            message: 'Hello'
        }
and we can get hold of this data simply by 
        message = input.required<>();


-------------------------------- Adding Dynamic Data to Routes: Resolve: UserTasksComponent---------------------------------------
We can pass dynamic data to routes in the app.routes.ts like this :
        resolve: []      In the array we pass resolver functions (as per modern angular,
                        because earlier they used to be classes)
RESOLVER FUNCTION: This function is a special type of function (of type ResolveFn), and it accepts
two parameters - ActivatedRouteSnapshot and RouterStateSnapshot. While creating this, We basically 
store a lambda function in a paramter.
IMPORTANT - Moreover, this function gets reexecuted everytime the route becomes active, basically
even if the dynamic part of the route changes (but not if the routeParams changes but we can configure 
this behaviour, check below) and that is the reason we need ActivatedRouteSnapshot and not activatedRoute 
because we do not need a subscription here because the function it self will be reexecuted everytime 
the params or something in the route changes.

/**
 * CLASS BASED RESOLVED
@Injectable({ providedIn: 'root' })
export class UserNameResolver implements Resolve<string> {
  constructor(private usersService: UsersService) {}
  resolve(activatedRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    const userName =
      this.usersService.users.find(
        (u) => u.id === activatedRoute.paramMap.get('userId')
      )?.name || '';
    return userName;
  }
}
*/


-------------------------------- Accessing Dynamic and static data -------------------------------- 
Two ways:- 
i) If we have withComponentInputBinding enables, we can directly set input with the same name 
as to which we passed the value. For example:
    userNameByResolverFunction: resolverUserName
for this, our input is:
userNameByResolverFunction = input<string>();

ii) Observable approach using ActivatedRoute.
The activated route dont just have paramMap or params property, but also data property
which yeilds and observable, basically it runs everytime the route changes. This data contains
all the static and dynamically resolved data inside it.


------------------------------- Configuring Resolver functions -----------------------------
By default, the resolver function only gets executed if the dynamic part of the route changes
but not if the queryParams changes, but we can reset this behaviour to run even if the queryParams 
changes by setting runGuardsAndResolvers to 'always' or 'paramsOrQueryParamsChanges'. 
Though this part is not implemented in the code.
TLDR: add runGuardsAndResolvers: 'paramsOrQueryParamsChange' in the route

------------------------------- Passing Static and Dynamic Data to Routes --------------------
We can set Title to a route, which will be shown on the tab. This title can be static or dynamic
static is a simple string and dynamic is a resolver function

------------------------------- Route Guards : App.Route.ts--------------------
They restrict access to a route and its child routes.
They are of 4 types:
i) canActivate: somewhat similar to canMatch but it comes into picture after canMatch and before
the component is being loaded
ii) canActivateChild
iii) canDeactivate: controls if the user can leave a component/route
iv) canMatch (similar to canActivate but bit more modern and versatile): This route allows
you to control weather the route should be matched by a url or not 

All these can properties take arrays and the array itself contain functions in modern
angular and classes in older versions of angular

Route Guard Functions:- Similar to resolver functions, we store a function in a constant and 
the type of the constant is CanMatchFn for canMatch guard. 
Return statements - They return a boolean or a redirect command or both wrapped in an observable. \
In case of false, we dont generally return false, but we return a new RedirectCommand()

Check route.ts to see class based canMacthGuard

------------------------------- canDeactivate guard: NewTaskComponent & user.routes.ts--------------------

Can deactivate guard is used to restrict the user from leaving the page, maybe becasue user 
have some information filled and then the user will loose it.   
We define it in similar way as resolver ( a function stored in a const). The definition looks like:
export const nameOfFunction: canDeactivateFn<NewTaskComponent> = 
  (component) => {
    // logic here, return true if the user can leace
  }
The canDeactivateFn takes component and we get the instance of that component in the 
lambda function
